

Mighty principles:

Things the player doesn't start shouldn't take any processing time.
Everything should move continuously unless it has a reason to be tile-aligned.


Petty principles:

The axis-aligned terrain (water mechanics...) simulates without regarding mobile objects. Mobile objects move on their own and mess with the terrain or actively get messed with by it.

"int" denotes a Very Small Number (e.g. coordinate numbers 0-2). Anything of real magnitude should be typedef'd.

Anything that blocks you after it hits you must collision-detect with your 'personal space shape'. Anything that doesn't block you after it hits you (either it ceases to exist or just passes through you with an effect, or...) is free to use your detailed shape. ("You" and "your" refer to any mobile object). This is because it's a terrible idea to let complicated shapes get tangled up with each other. In general, you don't compute collisions between detail shapes and personal space shapes.

For proper data hiding, any large function of class world that uses private members of world should be implemented as a call to a non-member function that takes references only to the private members that it actually changes.


The-assigning-of-code-to-files:
.cpp files should divide *systems*
Things directly defining the tile-based physics system (fluid simulation, etc) go in tile_physics.cpp
Things directly defining the objects-moving system go in object_motion.cpp
Everything that makes reference to the worldblock system goes in the_decomposition_of_the_world_into_blocks.cpp (It's nice that the worldblock system can be hidden behind a relatively simple set of abstractions)

polygon_collision_detection.cpp implements the polygon collision detection system (duh); it's independent of the world

specific_object_type_implementations.cpp is currently a hodgepodge of implementations of leaf object types; I have no attachment to that fact
disorganized_stuff.cpp houses the rest of the stuff that I haven't come up with a good way to categorize.


Naming/formatting conventions:

curly braces {
  two space indentation;
  with creative indentation for very extremely long
    and very uniform
    and more uniform
    and sooo uniform
  lines, so that
         things
         like
         x y and z
         line up better;
  there is no concerted attempt to limit the length of lines to anything in particular;
};


Anything declared+defined in a single .cpp file and not used elsewhere should be enclosed
in an anonymous namespace, to indicate this to the reader and the compiler.
The begin/end comments saying "anonymous" are encouraged but not required.

namespace /* anonymous */ {
code (not indented) {
}
more code;
} /* end anonymous namespace */



Various names look like:

local_variable
member_variable (TODO: perhaps change to member_variable_ or such?)
function_name, struct_name, constant_quantity
IDENTIFIER_CONSTANT (e.g. enum values. Not an amount of something, just a number that represents something)
TemplateArgument
typedefed_thing or typedefed_thing_t (the latter if it'd be nice to have variables named "typedefed_thing").

